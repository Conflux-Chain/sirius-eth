// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> should render and match the snapshot 1`] = `
<GlobalProvider
  data={
    Object {
      "currency": "USD",
    }
  }
>
  <ConfigProvider
    locale={
      Object {
        "Calendar": Object {
          "lang": Object {
            "backToToday": "Back to today",
            "clear": "Clear",
            "dateFormat": "M/D/YYYY",
            "dateSelect": "select date",
            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
            "dayFormat": "D",
            "decadeSelect": "Choose a decade",
            "locale": "en_US",
            "month": "Month",
            "monthBeforeYear": true,
            "monthPlaceholder": "Select month",
            "monthSelect": "Choose a month",
            "nextCentury": "Next century",
            "nextDecade": "Next decade",
            "nextMonth": "Next month (PageDown)",
            "nextYear": "Next year (Control + right)",
            "now": "Now",
            "ok": "Ok",
            "placeholder": "Select date",
            "previousCentury": "Last century",
            "previousDecade": "Last decade",
            "previousMonth": "Previous month (PageUp)",
            "previousYear": "Last year (Control + left)",
            "quarterPlaceholder": "Select quarter",
            "rangeMonthPlaceholder": Array [
              "Start month",
              "End month",
            ],
            "rangePlaceholder": Array [
              "Start date",
              "End date",
            ],
            "rangeWeekPlaceholder": Array [
              "Start week",
              "End week",
            ],
            "rangeYearPlaceholder": Array [
              "Start year",
              "End year",
            ],
            "timeSelect": "select time",
            "today": "Today",
            "weekPlaceholder": "Select week",
            "weekSelect": "Choose a week",
            "year": "Year",
            "yearFormat": "YYYY",
            "yearPlaceholder": "Select year",
            "yearSelect": "Choose a year",
          },
          "timePickerLocale": Object {
            "placeholder": "Select time",
            "rangePlaceholder": Array [
              "Start time",
              "End time",
            ],
          },
        },
        "DatePicker": Object {
          "lang": Object {
            "backToToday": "Back to today",
            "clear": "Clear",
            "dateFormat": "M/D/YYYY",
            "dateSelect": "select date",
            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
            "dayFormat": "D",
            "decadeSelect": "Choose a decade",
            "locale": "en_US",
            "month": "Month",
            "monthBeforeYear": true,
            "monthPlaceholder": "Select month",
            "monthSelect": "Choose a month",
            "nextCentury": "Next century",
            "nextDecade": "Next decade",
            "nextMonth": "Next month (PageDown)",
            "nextYear": "Next year (Control + right)",
            "now": "Now",
            "ok": "Ok",
            "placeholder": "Select date",
            "previousCentury": "Last century",
            "previousDecade": "Last decade",
            "previousMonth": "Previous month (PageUp)",
            "previousYear": "Last year (Control + left)",
            "quarterPlaceholder": "Select quarter",
            "rangeMonthPlaceholder": Array [
              "Start month",
              "End month",
            ],
            "rangePlaceholder": Array [
              "Start date",
              "End date",
            ],
            "rangeWeekPlaceholder": Array [
              "Start week",
              "End week",
            ],
            "rangeYearPlaceholder": Array [
              "Start year",
              "End year",
            ],
            "timeSelect": "select time",
            "today": "Today",
            "weekPlaceholder": "Select week",
            "weekSelect": "Choose a week",
            "year": "Year",
            "yearFormat": "YYYY",
            "yearPlaceholder": "Select year",
            "yearSelect": "Choose a year",
          },
          "timePickerLocale": Object {
            "placeholder": "Select time",
            "rangePlaceholder": Array [
              "Start time",
              "End time",
            ],
          },
        },
        "Empty": Object {
          "description": "No Data",
        },
        "Form": Object {
          "defaultValidateMessages": Object {
            "array": Object {
              "len": "Must be \${len} \${label}",
              "max": "At most \${max} \${label}",
              "min": "At least \${min} \${label}",
              "range": "The amount of \${label} must be between \${min}-\${max}",
            },
            "date": Object {
              "format": "\${label} date format is invalid",
              "invalid": "\${label} is an invalid date",
              "parse": "\${label} cannot be converted to a date",
            },
            "default": "Field validation error for \${label}",
            "enum": "\${label} must be one of [\${enum}]",
            "number": Object {
              "len": "\${label} must be equal to \${len}",
              "max": "\${label} must be maximum \${max}",
              "min": "\${label} must be minimum \${min}",
              "range": "\${label} must be between \${min}-\${max}",
            },
            "pattern": Object {
              "mismatch": "\${label} does not match the pattern \${pattern}",
            },
            "required": "Please enter \${label}",
            "string": Object {
              "len": "\${label} must be \${len} characters",
              "max": "\${label} must be up to \${max} characters",
              "min": "\${label} must be at least \${min} characters",
              "range": "\${label} must be between \${min}-\${max} characters",
            },
            "types": Object {
              "array": "\${label} is not a valid \${type}",
              "boolean": "\${label} is not a valid \${type}",
              "date": "\${label} is not a valid \${type}",
              "email": "\${label} is not a valid \${type}",
              "float": "\${label} is not a valid \${type}",
              "hex": "\${label} is not a valid \${type}",
              "integer": "\${label} is not a valid \${type}",
              "method": "\${label} is not a valid \${type}",
              "number": "\${label} is not a valid \${type}",
              "object": "\${label} is not a valid \${type}",
              "regexp": "\${label} is not a valid \${type}",
              "string": "\${label} is not a valid \${type}",
              "url": "\${label} is not a valid \${type}",
            },
            "whitespace": "\${label} cannot be a blank character",
          },
          "optional": "(optional)",
        },
        "Icon": Object {
          "icon": "icon",
        },
        "Image": Object {
          "preview": "Preview",
        },
        "Modal": Object {
          "cancelText": "Cancel",
          "justOkText": "OK",
          "okText": "OK",
        },
        "PageHeader": Object {
          "back": "Back",
        },
        "Pagination": Object {
          "items_per_page": "/ page",
          "jump_to": "Go to",
          "jump_to_confirm": "confirm",
          "next_3": "Next 3 Pages",
          "next_5": "Next 5 Pages",
          "next_page": "Next Page",
          "page": "",
          "prev_3": "Previous 3 Pages",
          "prev_5": "Previous 5 Pages",
          "prev_page": "Previous Page",
        },
        "Popconfirm": Object {
          "cancelText": "Cancel",
          "okText": "OK",
        },
        "Table": Object {
          "cancelSort": "Click to cancel sorting",
          "collapse": "Collapse row",
          "emptyText": "No data",
          "expand": "Expand row",
          "filterConfirm": "OK",
          "filterEmptyText": "No filters",
          "filterReset": "Reset",
          "filterTitle": "Filter menu",
          "selectAll": "Select current page",
          "selectInvert": "Invert current page",
          "selectNone": "Clear all data",
          "selectionAll": "Select all data",
          "sortTitle": "Sort",
          "triggerAsc": "Click to sort ascending",
          "triggerDesc": "Click to sort descending",
        },
        "Text": Object {
          "copied": "Copied",
          "copy": "Copy",
          "edit": "Edit",
          "expand": "Expand",
        },
        "TimePicker": Object {
          "placeholder": "Select time",
          "rangePlaceholder": Array [
            "Start time",
            "End time",
          ],
        },
        "Transfer": Object {
          "itemUnit": "item",
          "itemsUnit": "items",
          "remove": "Remove",
          "removeAll": "Remove all data",
          "removeCurrent": "Remove current page",
          "searchPlaceholder": "Search here",
          "selectAll": "Select all data",
          "selectCurrent": "Select current page",
          "selectInvert": "Invert current page",
          "titles": Array [
            "",
            "",
          ],
        },
        "Upload": Object {
          "downloadFile": "Download file",
          "previewFile": "Preview file",
          "removeFile": "Remove file",
          "uploadError": "Upload error",
          "uploading": "Uploading...",
        },
        "global": Object {
          "placeholder": "Please select",
        },
        "locale": "en",
      }
    }
  >
    <TxnHistoryProvider
      value={
        Object {
          "config": Object {
            "convert": [Function],
          },
        }
      }
    >
      <Context.Provider
        value={
          Object {
            "errorRetryCount": 0,
            "refreshInterval": 0,
            "revalidateOnFocus": false,
            "revalidateOnReconnect": false,
            "shouldRetryOnError": false,
          }
        }
      >
        <BrowserRouter>
          <CfxProvider
            theme={
              Object {
                "breakpoints": Object {
                  "lg": Object {
                    "max": "1440px",
                    "min": "1280px",
                  },
                  "md": Object {
                    "max": "1280px",
                    "min": "1024px",
                  },
                  "sm": Object {
                    "max": "1024px",
                    "min": "600px",
                  },
                  "xl": Object {
                    "max": "10000px",
                    "min": "1440px",
                  },
                  "xs": Object {
                    "max": "600px",
                    "min": "0",
                  },
                },
              }
            }
          >
            <UNDEFINED />
            <Helmet
              defaultTitle="ConfluxScan"
              defer={true}
              encodeSpecialCharacters={true}
              titleTemplate="%s - ConfluxScan"
            >
              <meta
                content="BlockChain Explorer for Conflux Network"
                name="description"
              />
            </Helmet>
            <React.Fragment>
              <UNDEFINED />
              <ForwardRef(app__Main)>
                <withRouter(_ScrollToTop)>
                  <Switch>
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/packing/:txHash"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/notfound/:contractAddress"
                    />
                    <Route
                      exact={true}
                      path={
                        Array [
                          "/contract-info/:contractAddress",
                          "/token-info/:contractAddress",
                        ]
                      }
                      render={[Function]}
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/contracts"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/registered-contracts"
                    />
                    <Route
                      exact={true}
                      path="/token/:tokenAddress"
                      render={[Function]}
                    />
                    <Route
                      exact={true}
                      path={
                        Array [
                          "/blocks-and-transactions",
                          "/blockchain",
                          "/blockchain/blocks-and-transactions",
                        ]
                      }
                      render={[Function]}
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/blockchain/blocks"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/blockchain/transactions"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/blockchain/cfx-transfers"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/blockchain/accounts"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/tokens"
                    />
                    <Route
                      exact={true}
                      path="/tokens/:tokenType"
                      render={[Function]}
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/sponsor"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/contract-deployment"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/contract-verification"
                    />
                    <Route
                      exact={true}
                      path="/sponsor/:contractAddress"
                      render={[Function]}
                    />
                    <Route
                      component={[Function]}
                      path="/charts"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/chart/:indicator"
                    />
                    <Route
                      exact={true}
                      path="/statistics"
                      render={[Function]}
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/statistics/:statsType"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/transaction/:hash"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/tx/:hash"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/block/:hash"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/epoch/:number"
                    />
                    <Route
                      path="/address/:address"
                      render={[Function]}
                    />
                    <Route
                      component={[Function]}
                      path="/search/:text"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path={
                        Array [
                          "/address-converter",
                          "/address-converter/:address",
                        ]
                      }
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/push-tx"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path={
                        Array [
                          "/block-countdown",
                          "/block-countdown/:block",
                        ]
                      }
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/swap"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/report"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path={
                        Array [
                          "/networkError",
                          "/networkError/:network",
                        ]
                      }
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/balance-checker"
                    />
                    <Route
                      exact={true}
                      path={
                        Array [
                          "/nft-checker",
                          "/nft-checker/:address",
                        ]
                      }
                      render={[Function]}
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/_benchmark"
                    />
                    <Route
                      component={[Function]}
                      exact={true}
                      path="/fccfx"
                    />
                    <Route
                      component={[Function]}
                    />
                  </Switch>
                </withRouter(_ScrollToTop)>
              </ForwardRef(app__Main)>
              <Unknown />
              <UNDEFINED />
              <UNDEFINED />
              <GlobalTip
                tipKey="addressWarning"
              />
            </React.Fragment>
            <GlobalNotify />
          </CfxProvider>
        </BrowserRouter>
      </Context.Provider>
    </TxnHistoryProvider>
  </ConfigProvider>
</GlobalProvider>
`;
